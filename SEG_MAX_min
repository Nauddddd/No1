    #include<bits/stdc++.h>
    using namespace std;
    #define ll long long
    int n;
    int SEG[2000009];
    int SEG1[2000009];
    int a[1000005];
    void build(int node, int start, int end){
        if(start==end) SEG[node]=a[start];
        else{
            int mid = (start+end)/2;
            build(2*node,start,mid);
            build(2*node+1,mid+1,end);
            SEG[node]=max(SEG[2*node],SEG[2*node+1]);
        }
    }
    void update(int node, int start, int end, int id, int val){
        if(start==end){
            a[id]+=val;
            SEG[node]=a[id];
        }
        else{
            int mid=(start+end)/2;
            if(start<=id&&id<=mid) update(2*node,start,mid,id,val);
            else update(2*node+1,mid+1,end,id,val);
            SEG[node]=max(SEG[2*node],SEG[2*node+1]);
        }
    }
    int query(int node, int start , int end, int l, int r){
        if(r<start||end<l) return 0;
        if(l<=start&&end<=r) return SEG[node];
        int mid = (start+end)/2;
        int p1=query(2*node,start,mid,l,r);
        int p2=query(2*node+1,mid+1,end,l,r);
        return max(p1,p2);
    }
    void build1(int node, int start, int end){
        if(start==end) SEG1[node]=a[start];
        else{
            int mid = (start+end)/2;
            build1(2*node,start,mid);
            build1(2*node+1,mid+1,end);
            SEG1[node]=min(SEG1[2*node],SEG1[2*node+1]);
        }
    }
    void update1(int node, int start, int end, int id, int val){
        if(start==end){
            a[id]+=val;
            SEG1[node]=a[id];
        }
        else{
            int mid=(start+end)/2;
            if(start<=id&&id<=mid) update1(2*node,start,mid,id,val);
            else update1(2*node+1,mid+1,end,id,val);
            SEG1[node]=min(SEG1[2*node],SEG1[2*node+1]);
        }
    }
    int query1(int node, int start , int end, int l, int r){
        if(r<start||end<l) return 10000000009;
        if(l<=start&&end<=r) return SEG1[node];
        int mid = (start+end)/2;
        int p1=query1(2*node,start,mid,l,r);
        int p2=query1(2*node+1,mid+1,end,l,r);
        return min(p1,p2);
    }
    int main(){
        int q,x,l,r;
        cin>>n>>q;
        for(int i=1;i<=n;i++){
            cin>>a[i];
        }
        build(1,1,n);
        build1(1,1,n);
        for(int i=0;i<q;i++){
            cin>>x>>l>>r;
            if(x==1){
                 int rs = query(1,1,n,l,r)-query1(1,1,n,l,r);
                 cout<<rs<<'\n';
            }
            else{
                 update(1,1,n,l,r);
                 update1(1,1,n,l,0);
            }
        }
    }
